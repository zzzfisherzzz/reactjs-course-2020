{"version":3,"sources":["context.js","components/Todo/TodoItem.js","components/Todo/TodoList.js","components/Loader/Loader.js","components/Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItemd","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","alignItems","Modal","state","isOpen","Fragment","setState","this","Component","AddTodo","lazy","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","setTimeout","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","Loader","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c81adf44.chunk.js","sourcesContent":["import React from 'react';\n\nconst Context = React.createContext()\n\nexport default Context;","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types'\nimport Context from '../../context'\n\nconst styles = {\n    li: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItemd: 'center',\n        padding: '.5rem 1rem',\n        border: '1px solid #000',\n        borderRadius: '4px',\n        marginBottom: '.5rem'\n    },\n    input: {\n        marginRight: '1rem'\n    }\n}\n\nfunction TodoItem({ todo, index, onChange }) {\n    const { removeTodo } = useContext(Context)\n    const classes = [];\n\n    if (todo.completed) {\n        classes.push('done')\n    }\n\n    return (\n        <li style={styles.li}>\n            <span className={classes.join(' ')}>\n                <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    style={styles.input}\n                    onChange={() => onChange(todo.id)}\n                />\n                {index + 1}\n                &nbsp;\n                {todo.title}\n            </span>\n            <button className=\"remove\" onClick={removeTodo.bind(null, todo.id)}>&times;</button>\n        </li>\n    );\n};\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    index: PropTypes.number,\n    onChange: PropTypes.func.isRequired\n}\n\n\nexport default TodoItem;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport TodoItem from './TodoItem';\n\nconst styles = {\n    ul: {\n        listStyle: 'none',\n        margin: 0,\n        padding: 0\n    }\n}\n\nfunction TodoList(props) {\n    return (\n        <ul style={styles.ul}>\n            {props.todos.map((todo, index) => {\n                return (\n                    <TodoItem\n                        todo={todo}\n                        key={todo.id}\n                        index={index}\n                        onChange={props.onToggle}\n                    />\n                )\n            })}\n        </ul>\n    )\n}\n\nTodoList.propTypes = {\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onToggle: PropTypes.func.isRequired\n}\n\n\nexport default TodoList;\n\n","import React from 'react';\n\nexport default () => {\n    return (\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', margin: '.5rem' }}>\n            <div className=\"lds-dual-ring\" ></div>\n        </div>\n    )\n}\n\n","import React, { Component } from 'react'\nimport './Modal.css'\n\nclass Modal extends Component {\n    state = {\n        isOpen: false\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <button onClick={() => this.setState({ isOpen: true })}>\n                    Open modal\n                </button>\n                {\n                    this.state.isOpen && (\n                        <div className=\"modal\">\n                            <div className=\"modal-body\">\n                                <h1>Modal title</h1>\n                                <p>I am awesome modal!</p>\n                                <button onClick={() => this.setState({ isOpen: false })}>Close modal</button>\n                            </div>\n                        </div>\n                    )\n                }\n            </React.Fragment >\n        )\n    }\n}\n\nexport default Modal","import React, { useState, useEffect } from 'react';\nimport TodoList from './components/Todo/TodoList'\nimport Context from './context'\nimport Loader from './components/Loader/Loader'\nimport Modal from './components/Modal/Modal';\n\nconst AddTodo = React.lazy(() => import('./components/Todo/AddTodo.js'))\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n      .then(response => response.json())\n      .then(todos => {\n        setTimeout(() => {\n          setTodos(todos)\n          setLoading(false)\n        }, 2000)\n      })\n  }, [])\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n    )\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title) {\n    setTodos(todos.concat([{\n      title,\n      id: Date.now(),\n      completed: false\n    }]))\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"wrapper\">\n        <h1>React tutorial</h1>\n        <Modal />\n        <React.Suspense fallback={<p>loading...</p>}>\n          <AddTodo onCreate={addTodo} />\n        </React.Suspense>\n        {loading && <Loader />}\n        {todos.length ?\n          (\n            <TodoList todos={todos} onToggle={toggleTodo} />\n          ) : loading ? null : (\n            <p>No todos!</p>\n          )}\n      </div>\n    </Context.Provider >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}